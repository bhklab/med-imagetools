name: CI-CD

# only run on pushes to main or pull requests
on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
  release:

# concurrency:
#   group: ${{ github.workflow }}_${{ github.event.pull_request.number || github.ref }}
#   cancel-in-progress: true

jobs:
  ###############################################################################################
  # Unit-Tests: Run unit tests using pytest
  ################################################################################################
  Unit-Tests:
    runs-on: ${{ matrix.os }}
    continue-on-error: true # dont fail the whole matrix if one fails
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-13, windows-latest] 
        env: ["py310", "py311", "py313"] #"py312" removed for now...
        TestAccessType: ["public", "private"]

    # this action needs to be able to read contents of other repos
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      
      - name: Run Unit Tests
        uses: ./.github/actions/pytest/
        with:
          os: ${{ matrix.os }}
          env: ${{ matrix.env }}
          test_access_type: ${{ matrix.TestAccessType }}
          github_token: ${{ secrets.MEDIMG_TESTDATA_PAT }}
          test_type: "unittests"

  ################################################################################################
  # Codecov: Run codecov to check coverage
  ################################################################################################
#   Code-Coverage:
#     needs: Unit-Tests
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Download coverage.xml artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: coverage-report
#           path: coverage-report

#       - name: Use Codecov to track coverage
#         uses: codecov/codecov-action@v3
#         with:
#           token: ${{ secrets.CODECOV_TOKEN }}
#           files: ./coverage-report/coverage.xml
#           fail_ci_if_error: true
#           verbose: true
#           name: codecov-umbrella

  ################################################################################################
  # Linting: Run linting using Ruff & Mypy
  ################################################################################################
  # Goal here is to run ruff check and mypy, and then upload the results to the PR
  # even if one fails, it should still run the other
  Linting:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      checks: write
      issues: write
      pull-requests: write
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          environments: "test"
          pixi-version: v0.46.0
          cache: true
          locked: false

      - name: Run ruff check
        id: ruff_check
        if: always()
        run: |
          set -eu pipefail
          pixi run -e test ruff-check --fix --unsafe-fixes --exit-non-zero-on-fix

      - name: Post ruff lint suggestions
        uses: reviewdog/action-suggester@v1
        with:
          tool_name: ruff-lint
          fail_level: none
          filter_mode: added

      - name: Run ruff format
        id: ruff_format
        if: always()
        run: |
          pixi run -e test ruff-format --exit-non-zero-on-format

      - name: Post ruff format suggestions
        uses: reviewdog/action-suggester@v1
        with:
          tool_name: ruff-format
          fail_level: none
          filter_mode: diff_context

      - name: Run mypy check
        id: mypy
        if: always()
        run: |
          pixi run -e test type-check

  ################################################################################################
  # Build-Docs: Build documentation using mkdocs
  ################################################################################################
  Build-Docs:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15 # Consider increasing timeout
    strategy:
      matrix:
        os: [ubuntu-latest] # , windows-latest removed for now
        env: ["docs"]

    steps:
      - uses: actions/checkout@v4

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          environments: ${{ matrix.env }}
          pixi-version: v0.46.0
          cache: true
          locked: false # wont be the same because of the tag

      - name: Test docs build
        run: |
          pixi run -e ${{ matrix.env }} doc-build

  ################################################################################################
  # Publish-Docs: Publish documentation to GitHub Pages using mike only on main branch
  ################################################################################################
  Publish-Docs:
    needs: Build-Docs
    if: github.ref == 'refs/heads/development'

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}

    permissions:
      # Need to give the action permission to write to the repository to deploy the docs
      contents: write

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        env: ["docs"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          environments: ${{ matrix.env }}
          pixi-version: v0.46.0
          cache: true
          locked: false # wont be the same because of the tag

      - name: Test docs build
        run: |
          pixi run -e ${{ matrix.env }} doc-build

      - name: Publish docs using mike
        run: |
          pixi run -e ${{ matrix.env }} mike deploy --push dev devel


  ################################################################################################
  # CD: Continuous Deployment
  ################################################################################################
  Continuous-Deployment:
    concurrency: release
    permissions:
      id-token: write
      actions: read
      contents: write
      packages: write
      issues: write
      pull-requests: write

    needs: Unit-Tests

    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development'

    # Set up operating system
    runs-on: ubuntu-latest

    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}

    # Define job steps
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.SEMVERPOLICE_ID }}
          private-key: ${{ secrets.SEMVER_APP_KEY }}

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Check-out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Python Semantic Release
        uses: python-semantic-release/python-semantic-release@master
        id: release
        with:
          root_options: -v
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "gh-actions-semver"

  pip-squeak:
    needs: Continuous-Deployment
    if: needs.Continuous-Deployment.outputs.released == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code with tag ${{ needs.Continuous-Deployment.outputs.tag }}
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.Continuous-Deployment.outputs.tag }}

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install Package Builder
        run: python3 -m pip install build

      - name: Build package
        run: python3 -m build --sdist --wheel --outdir dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          user: ${{ secrets.pypi_token }}
          password: ${{ secrets.pypi_api }}

  ################################################################################################
  # Docker: Build and publish Docker image when Continuous-Deployment is successful
  ################################################################################################
  Docker-Publish:
    needs: Continuous-Deployment
    if: needs.Continuous-Deployment.outputs.released == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ['3.10', '3.11', '3.12']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.BHKLAB_DOCKERHUB_USERNAME }}
          password: ${{ secrets.BHKLAB_DOCKERHUB_ACCESS_KEY }}

      - name: Set build metadata
        id: meta
        run: echo "build_date=$(date --utc +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            bhklab/med-imagetools:${{ matrix.python_version }}-${{ needs.Continuous-Deployment.outputs.tag}}
            bhklab/med-imagetools:latest
          build-args: |
            PYTHON_VERSION=${{ matrix.python_version }}
            VERSION=${{ needs.Continuous-Deployment.outputs.tag}}
            GIT_COMMIT=${{ github.sha }}
            BUILD_DATE=${{ steps.meta.outputs.build_date }}
          provenance: false

  does-the-pip-squeak:
    needs: [pip-squeak, Continuous-Deployment]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.12", "3.11", "3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install using PyPi
        run: |
          pip install med-imagetools==${{ needs.Continuous-Deployment.outputs.tag}}
          imgtools --help
